name: myproject
x-config: &conf
  restart: unless-stopped
  networks:
    - mynet   
 
x-environment: &env           # unraid权限设置
    TZ: Asia/Shanghai
    PUID: "99"
    PGID: "100"        

# 上面创建锚点 下面使用
services:
#   注意事项: ❗❗❗ ❗❗❗ 
#
#      这是一个自用项目 目的就是能迅速的起来自己需要的这些容器 你可以选择性的删除一些段 因为这里面有一些是功能重合的
# 
#
#          1. 你需要替换你的路径 成为你的路径 
#
#          2. 当你做完上面这个步骤之后 你把这个全部复制进compose插件 这是针对unraid的
#             如果你不是unriad的话,找个地方 直接nano/vi compose.yml 然后粘贴 保存退出
#
#          3. 执行docker compose up -d 等待拉取镜像运行镜像就OK了。
#
#          4.joplin 修改APP_BASE_URL 为你服务器的ip，然后需要设置反向代理才能访问（一定要使用目标地址host，否则还是错），默认后端是http://服务器ip:22300 
#
#          5.Plex 第一次部署没法添加本地媒体库 解决方案 打开windows cmd 输入 ssh root@服务器IP -L 8888:localhost:32400
#            然后打开你的浏览器输入 http://localhost:8888/web  就能正确配置了  然后下次就可以用你服务器ip:32400访问了   
#            当然你也可以用9999之类没有占用的端口即可
#
#          6. transmission 下面有下载webui的界面地址和说明 
#
# **********************************************  数据库管理 && 工具 *********************************************************** 
  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Postgresql_B.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8082]"
    environment:
      TZ: Asia/Shanghai
      PGADMIN_DEFAULT_EMAIL: admin@admin.com    # 邮箱
      PGADMIN_DEFAULT_PASSWORD: password           # 用户密码
    user: root
    ports:
      - "8082:80"
    volumes:
      - ${DATA_PATH}/pgadmin/data:/var/lib/pgadmin
    <<: *conf

  adminer:
    image: adminer
    container_name: adminer
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Adminer_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8080]"
    ports:
      - 8080:8080
    <<: *conf
    environment:
      <<: *env
      ADMINER_DESIGN: "pepa-linha-dark"          # 主题 填名称  https://www.adminer.org/  首页有主题名
      ADMINER_PLUGINS: "json-column"             # 插件 填名称  https://www.adminer.org/  首页有插件页进去


  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Watchtower_A.png"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: "Asia/Shanghai"
      WATCHTOWER_POLL_INTERVAL: "43200"  # 轮询时间 单位 秒
      #WATCHTOWER_LABEL_ENABLE: "true"   # 监视并更新com.centurylinklabs.watchtower.enable标签设置为 true 的容器
      WATCHTOWER_CLEANUP: "true"         # 清理玄虚镜像
      WATCHTOWER_REMOVE_VOLUMES: "true"  # 删除匿名卷
      WATCHTOWER_ROLLING_RESTART: "true" # 每次只停止并更新一个容器
    network_mode: "host"

  snapdrop:
    image: linuxserver/snapdrop
    container_name: snapdrop
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Snapdrop_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:84]"
    environment:
      <<: *env
    volumes:
      - ${DATA_PATH}/snapdrop:/config
    ports:
      - 84:80
    <<: *conf
# ******************************************************************************************************* 
#  rclone:                                # 挂载是没问题就是重启后挂载失败 原因是重启前没有unmount
#    image: d2dyno/rclone-gui
#    container_name: rclone
#    privileged: true 
#    environment:
#      TZ: "Asia/Shanghai"
#      USER_ID: "0"
#      GROUP_ID: "0"
#      RCUSER: "admin"
#      RCPASS: "password"
#      HTTP_PROXY: "http://v2:20172"
#      HTTPS_PROXY: "http://v2:20172"
#    volumes:
#      - /mnt/user/appdata/rclonebrowser:/config
#      - /mnt/user/rclone-data:/media:shared
#    ports:
#      - 5572:5572
#    devices:
#      - "/dev/fuse:/dev/fuse"
#    <<: *conf
# ******************************************************************************************************************** 


# ********************************************** 影音媒体类 ***********************************************************
  jf:
    image: nyanmisaka/jellyfin         # n大版jf 开箱即用
    container_name: jellyfin
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Jellyfin/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8096]"
    ports: 
      - "8096:8096"
    volumes:
      - ${DATA_PATH}/jellyfin:/config      # 配置文件路径
      - ${MOVIE_DATA}:/moviedata              # 媒体文件路径
      - /dev/shm/jf:/cache                           # 缓存进内存
    <<: *conf
    environment:
      <<: *env
    privileged: true                               # 特权模式
    devices:
      - "/dev:/dev"


  emby:
    image: linuxserver/emby
    container_name: emby
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Emby/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8097]"
    ports:
      - 8097:8096
    volumes:
      - ${DATA_PATH}/emby:/config       # 配置文件路径
      - ${MOVIE_DATA}:/moviedata                 # 媒体文件路径
      #- /dev/shm/emby:/dev/shm/emby                           # emby这条没用
    <<: *conf
    environment:
      <<: *env
    privileged: true
    devices:
      - "/dev:/dev"
  
  plex:
    image: linuxserver/plex
    container_name: plex
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Plex_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:32400]"
    ports:
      - 32400:32400 
      - 1900:1900/udp  
      - 8324:8324 
      - 32410:32410/udp 
      - 32412:32412/udp 
      - 32413:32413/udp 
      - 32414:32414/udp 
      - 32469:32469
    environment:
      <<: *env
    volumes:
      - ${DATA_PATH}/plex:/config
      - ${MOVIE_DATA}:/moviedata
    <<: *conf
    privileged: true
    devices:
      - "/dev:/dev"
# ********************************************** PT & BT 相关应用 ***********************************************************
  iyuu:
    image: iyuucn/iyuuplus
    container_name: iyuu
    labels:
      net.unraid.docker.icon: "https://iyuu.cn/usr/uploads/logo/logo_257.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8787]"
    volumes:
      - ${DATA_PATH}/iyuu:/IYUU/db
      #- ${DATA_PATH}/qbittorrent/qBittorrent/data/BT_backup:/BT_backup  #冒号左边请修改为你自己的路径，如不使用qb，可删除本行
      #- ${DATA_PATH}/transmission/torrents:/torrents   #冒号左边请修改为你自己的路径，如不使用tr，可删除本行
    ports:
      - 8787:8787
    environment:
      <<: *env
    <<: *conf

  nt:    # v3版本
    image: hsuyelin/nas-tools
    container_name: nas-tools
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Nastools_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:3001]"
    ports:
      - 3001:3000
    volumes:
      - ${DATA_PATH}/nastools:/config          # 配置路径
      - ${MOVIE_DATA}:/movie_data                   # 媒体文件和下载目录的公共的上层路径
    <<: *conf
    environment:
      <<: *env
  

  mp:
    image: jxxghp/moviepilot
    container_name: moviepilot
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Moviepilot_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:3002]"
    volumes:
      - ${DATA_PATH}/moviepilot:/config
      - ${MOVIE_DATA}:/movie_data   # 要和下载器配置一致
    ports:
      - 3002:3000
    env_file:
      - ./app.env
    <<: *conf

# ———————— 黑色马甲一件 ——————————
  jk:
    image: linuxserver/jackett
    container_name: jackett
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Jackett/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:9117]"
    <<: *conf
    environment:
      <<: *env
      AUTO_UPDATE: "true" #optional
      # RUN_OPTS:  #optional
    volumes:
      - ${DATA_PATH}/jackett:/config
      - ${MOVIE_DATA}:/downloads
    ports:
      - 9117:9117
    
# —————— 字幕下载 ——————————
  csf:
    image: allanpk716/chinesesubfinder:latest-lite
    container_name: chinesesubfinder
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Chinesesubfinder_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:19035]"
    volumes:
      - ${DATA_PATH}/chinesesubfinder:/config  # 冒号左边请修改为你想在主机上保存配置、日志等文件的路径
      - ${MOVIE_DATA}:/media    # 请修改为你的媒体目录，冒号右边必须是/media  否则报权限错
    <<: *conf
    environment:
      <<: *env
    ports:
      - 19035:19035
      - 19037:19037  # webui 的视频列表读取图片用，务必设置不要暴露到外网
    logging:
        driver: "json-file"
        options:
          max-size: "100m" # 限制docker控制台日志大小，可自行调整
# ———— PT佬必备 ————————————
  cc:
    image: easychen/cookiecloud
    container_name: cookiecloud
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Cookiecloud_A.png"
    volumes:
      - ${DATA_PATH}/cookiecloud:/data/api/data
    ports:
      - 8088:8088
    <<: *conf
    environment:
      <<: *env

# 本项目需要搭配浏览器插件 并且在浏览器插件里填写相应的 ip 端口 以及有公网访问需求的话建议在配置文件里开启并加上token
  kubespider:
    image: cesign/kubespider
    container_name: kubespider
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Kubespider_A.png"
      com.centurylinklabs.watchtower.enable: "true"
    depends_on:
      - qb             
      - aria2
    environment:
      <<: *env
    ports:
      - 3080:3080
    volumes:
      - ${DATA_PATH}/kubespider:/app/.config         # 去路径下 更改配置文件
    <<: *conf
# **********************************************  下载器类 ***********************************************************
  qb:                                 # qb启动完成看日志  有随机密码  
    image: johngong/qbittorrent
    container_name: qbittorrent
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/qBittorrent/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8989]"
    ports:
      - 8989:8989
      - 6881:6881/tcp
      - 6881:6881/udp
    volumes:
      - ${DATA_PATH}/qbittorrent:/config             # 配置路径
      - ${MOVIE_DATA}:/Downloads                     # 下载路径
    <<: *conf
    environment:
      UID: "99"
      GID: "100"
      QB_WEBUI_PORT: "8989"
      QB_TRACKERS_UPDATE_AUTO: "true"
      QB_TRACKERS_LIST_URL: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/ngosang/trackerslist/master/trackers_all.txt"


  tr:
    image: linuxserver/transmission
    container_name: transmission
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Transmission/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:9091]"
    <<: *conf
    environment:
      <<: *env
      TRANSMISSION_WEB_HOME: /config/src/ #optional          # webui下载地址 https://github.com/ronggang/transmission-web-control  把src目录解压出来丢进${DATA_PATH}/tr/目录下刷新
      USER:                                                 # 登录账户
      PASS:                                                 # 登录密码
      WHITELIST:  #optional
      PEERPORT: #optional
      HOST_WHITELIST:  #optional

    volumes:
      - ${DATA_PATH}/transmission:/config               # 配置路径
      - ${MOVIE_DATA}:/downloads                       # 下载路径
      # - /path/to/watch/folder:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp

# ———————————————— aria2后端 ———————————
  aria2:
    container_name: aria2
    image: p3terx/aria2-pro
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Aria2_B.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:6880]"
    ports:
      - 6800:6800
      - 6888:6888/tcp
      - 6888:6888/udp              # 请在路由器映射6888的tcp和udp端口
    environment:
      <<: *env
      RPC_SECRET: "password"       # WebUI 连接时需要填写的密码
      RPC_PORT: "6800"             # RPC 端口设置
      LISTEN_PORT: "6888"          # BT 监听端口（TCP）、DHT 监听端口（UDP）设置
      DISK_CACHE: "64M"            # 磁盘缓存设置，默认值64M
      IPV6_MODE: "false"           # IPv6 模式
      UPDATE_TRACKERS: "true"      # 更新trakers
      CUSTOM_TRACKER_URL: "https://cf.trackerslist.com/best.txt"          # trackers 列表
    volumes:
      - ${DATA_PATH}/aria2:/config
      - ${MOVIE_DATA}:/downloads
    <<: *conf
    logging:
      driver: "json-file"
      options:
        max-size: "1M"

# ———————————————— aria2前端 —————————————
  ariang:
    container_name: ariang
    image: p3terx/ariang
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Aria2_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:6880]"
    ports:
      - 6880:6880
    <<: *conf
    environment:
      <<: *env
    logging:
      driver: "json-file"
      options:
        max-size: "1M"

# **********************************************  科学类 ***********************************************************
# ———— 懂的都懂 ——————
  v2:
    image: mzz2017/v2raya
    container_name: v2raya
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/V2raya_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:2017]"
      com.centurylinklabs.watchtower.enable: "true"         # 设置watchtower 监控更新标签
    privileged: true
    ports:
      - 2017:2017
      - 20170-20172:20170-20172
    <<: *conf
    environment:
      <<: *env
      V2RAYA_LOG_FILE: "/tmp/v2raya.log"
      V2RAYA_V2RAY_BIN: "/usr/local/bin/v2ray"      # 这行注释掉就会默认使用xray-core
    volumes:
      - ${DATA_PATH}/v2raya:/etc/v2raya
      - /lib/modules:/lib/modules:ro
      - /etc/resolv.conf:/etc/resolv.conf

# —————— 超好用的wirguard ——————
  wg:
    image: leesonaa/wgcnv6-easy
    container_name: wg
    environment:
      <<: *env
      - WG_HOST=raspberrypi.local   # you.domain.com 你的域名地址 不要协议头 ⚠️ 
      - PASSWORD=foobar123          # *必填 web登录密码  ⚠️ 
      # - WG_PORT=51820               # 可选 如果是bridge的方式部署 这里写容器外的端口号，如果下面的ports那边映射的是11820：51820的话 这里就是11820了
      # - WG_DEFAULT_ADDRESS_IPV4=10.8.0.x    # 可选 你的wg私网v4网段  最后一个必须是  x 
      # - WG_DEFAULT_ADDRESS_IPV6=fd42:42:42::x   # 可选 你的wg v6私网网段 最后一个必须是 x 可以保持默认
      # - WG_DEFAULT_DNS=223.5.5.5,119.29.29.29                 # 可选 默认是阿里云的v4&v6的公共dns地址
      # - WG_MTU=1420                               # 可选 
      # - WG_ALLOWED_IPS=192.168.15.0/24, 10.0.1.0/24     # 可选 默认是任何地址0.0.0.0/24 ::0/64
    #privileged: true # for podman issues   # 一般不需要特权
    volumes:
      - ${DATA_PATH}/wg:/etc/wireguard
    ports:
      - "51820:51820/udp"
      - "51821:51821/tcp"
    <<: *conf
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:                                    # ⚠️ 从这里开始  如果是bridge模式 就必须带上这一段 ,v6的话 如果wan侧有v6 lan侧没有 用socat或者lucky 从主路由把入站的udp端口甩过来 
      - net.ipv4.ip_forward=1                       # 如果是lan测也有v6,也就是宿主机有v6 建议直接host模式 sysctls这段注释掉
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1
      - net.ipv6.conf.eth0.proxy_ndp=1
# **********************************************  自建网盘类 ***********************************************************
# —————— alist  ————————
  alist:
    image: xhofe/alist
    container_name: alist
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Alist/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:5244]"
    ports:
      - 5244:5244
    volumes:
      - ${DATA_PATH}/alist:/opt/alist/data
    # - ${MOVIE_DATA}:/mydata            # 这里写自己要共享的路径映射
    <<: *conf
    environment:
      <<: *env
      PUID: "0"
      PGID: "0"
      UMASK: "022"

# ——————— nascab —————————
  cab:
    image: ypptec/nascab
    container_name: nascab
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Nascab_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:81]"
    ports:
      - 81:80  # http port
      - 90:90  # webdav port
    volumes:
      - ${DATA_PATH}/nascab:/root/.local/share/nascab
     #- /mnt/user/appdata/photo:/mydata           # 映射自己的数据 比如影音 照片等等
    <<: *conf
    environment:
      <<: *env
    logging:
      options:
        max-size: "10M"
        max-file: "3"

# —————————————————  这一段是webos的相关配置  ——————————————————————
  webos:
    image: fs185085781/webos
    container_name: webos
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Webos_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8087]"
    ports:
      - 8087:8088
    volumes:
      - ${DATA_PATH}/webos/config:/webos/api/rootPath   # 配置持久化
      - ${DATA_PATH}/webos/apps:/webos/web/apps         # 插件app持久化
    # - ${DATA_PATH}:/mydata       # 挂载宿主
    <<: *conf
    environment:
      <<: *env
    depends_on:
      - webosredis
      - webosdb

  webosdb:
    image: linuxserver/mariadb
    container_name: webosdb
    labels: 
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/MariaDB/icon.png"
    ports:
      - 3306:3306
    volumes:
      - ${DATA_PATH}/webosdb:/var/lib/mysql          # 数据库文件路径
    environment:
      <<: *env
      MYSQL_ROOT_PASSWORD: "webos"                  # 数据库root密码
      MYSQL_DATABASE: "webos"                         # 数据库 名
      #MYSQL_USER: "webos"                          # 数据库 用户
      #MYSQL_PASSWORD: "webos"                       # 数据库用户 密码
    <<: *conf


  webosredis:
    image: redis
    container_name: webosredis
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Redis_A.png"
    <<: *conf
    environment:
      <<: *env


# **********************************************  一般工具类 ***********************************************************

# ——————  公网利器lucky ————————
  lucky:
    image: gdy666/lucky
    container_name: lucky
    labels:
      net.unraid.docker.icon: "https://cdn.jsdelivr.net/gh/IceWhaleTech/CasaOS-AppStore@main/Apps/Lucky/icon.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:16601]"
    volumes:
      - ${DATA_PATH}/lucky:/goodluck
    network_mode: host
    restart: always

# ——— 签到 ————
  qd:
    image: qdtoday/qd
    container_name: qiandao
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Qiandao_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8923]"
    ports:
      - 8923:80
    volumes:
      - ${DATA_PATH}/qiandao:/usr/src/app/config
    environment:
      <<: *env
      PROXIES: "v2:20172"   # 代理地址
    <<: *conf

# —————— syncthing同步 ————————
  syncthing:
    image: syncthing/syncthing
    container_name: syncthing
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Syncthing_B.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:8384]"
    environment:
      <<: *env
    volumes:
      - ${DATA_PATH}/sync:/var/syncthing 
    network_mode: host

# —————— 青龙 ——————————
  ql:
    image: whyour/qinglong
    container_name: qinglong
    labels:
      net.unraid.docker.icon: "https://user-images.githubusercontent.com/22700758/191449379-f9f56204-0e31-4a16-be5a-331f52696a73.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:5700]"
      com.centurylinklabs.watchtower.enable: "true"
    volumes:
      - ${DATA_PATH}/qinglong:/ql/data
    ports:
      - 5700:5700
    environment:
      <<: *env
    <<: *conf

# ————————  vaultwarden密码  ——————————
  vaultwarden:
    image: vaultwarden/server
    container_name: vaultwarden
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Bitwarden_A.png"
      net.unraid.docker.webui: ""  # 你的反向代理域名地址
    volumes:
      - ${DATA_PATH}/vaultwarden:/data
    ports:
      - 83:80
    environment:
      <<: *env
      #SIGNUPS_ALLOWED: "false"    # 去掉前面的#号 就是禁止注册了，建议注册好自己的主用户后再打开这个选项
    <<: *conf


# ———————— heimdall导航 ——————————————   弃用 打开速度太慢了
# css 文件 请参考 https://github.com/leesonaa/unraid-docker-compose 里heimdall css文件
#  heimdall:
#    image: linuxserver/heimdall
#    container_name: heimdall
#    labels:
#      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Heimdall_B.png"
#      net.unraid.docker.webui: "http://[IP]:[PORT:82]"
#    environment:
#      <<: *env
#    volumes:
#      - ${DATA_PATH}/heimdall:/config
#    ports:
#      - 82:80
#    <<: *conf

# ———————— sun-panel导航面板 —————————————— user: admin@sun.cc  passwd: 12345678
  sun-panel:
    image: hslr/sun-panel
    container_name: sun-panel
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/hslr-s/sun-panel/master/doc/images/logo.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:3003]"
    volumes:
    - ${DATA_PATH}/sun-panel/conf:/app/conf
    - ${DATA_PATH}/sun-panel/uploads:/app/uploads
    - ${DATA_PATH}/sun-panel/database:/app/database
    # - ./runtime:/app/runtime   # 日志文件
    ports:
    - 3003:3002
    environment:
      <<: *env
    <<: *conf

# ——————————————————————————————————————————————————————————————————————————————————————————
#  excalidraw:
#    image: excalidraw/excalidraw
#    container_name: excalidraw
#    labels:
#      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Excalidraw_B.png"
#      net.unraid.docker.webui: "http://[IP]:[PORT:85]"
#    ports:
#      - "85:80"
#    environment:
#      <<: *env
#    <<: *conf

#———————  excalidraw可协作的绘画板  —————————————— 
#  ❗❗❗ 注意事项：
#  ❗❗❗ 前端需要反代才能访问 
#  ❗❗❗ 你需要做3个反向代理分别指向 前端端口86  协助服务器端口85  后端存储端口8081
#  ❗❗❗  主页面就是你的前端的外网域名地址  做一个指向86端口的前端域名地址即可访问
#  ❗❗❗ ❗❗❗ ❗❗❗  我是用的lucky做的反向代理  打开 1.使用目标host  2.打开跨域支持
  excalidraw:   # excalidraw 前端  需要反代才能访问  
    image: alswl/excalidraw:v0.17.0-fork-b2
    container_name: dw-excalidraw
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Excalidraw_B.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:86]"  # 这段其实没啥作用 因为http访问不了 必须使用https
    environment:
      - VITE_APP_BACKEND_V2_GET_URL=https://houduancunchu.baidu.com:1234/scenes/       # 存储后端的域名地址   这里用houduanchunchu.baidu.com:1234 举的例  
      - VITE_APP_BACKEND_V2_POST_URL=https://houduancunchu.baidu.com:1234/scenes/  # 存储后端的域名地址  这里用houduanchunchu.baidu.com:1234 举的例
      - VITE_APP_WS_SERVER_URL=https://xiezhufuwuqi.baidu.com:1234     # 协助服务器的域名地址     这里用 xiezhufuwuqi.baidu.com:1234  举例
      - VITE_APP_FIREBASE_CONFIG={}
      # alswl'fork env
      # forked excalidraw can use env https://github.com/alswl/excalidraw/pull/5
      - VITE_APP_HTTP_STORAGE_BACKEND_URL=https://houduancunchu.baidu.com:1234/api/v2     # 存储后端的域名地址   这里用houduanchunchu.baidu.com:1234 举的例
      - VITE_APP_STORAGE_BACKEND=http
    ports:
      - 86:80
    <<: *conf
    depends_on:
      - room
      - storage
# 需要反向代理
  storage:     # excalidraw存储后端
    image: alswl/excalidraw-storage-backend:v2023.11.11
    container_name: dw-storage
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Excalidraw_B.png"
    environment: # docs https://github.com/alswl/excalidraw-storage-backend#environement-variables
      PORT: "8081"                  #PORT 服务器监听端口 默认8081  这里要和下面容器内端口一样
      GLOBAL_PREFIX: "/api/v2"            #GLOBAL_PREFIX 每个路由的 API 全局前缀  /api/v2
      STORAGE_URI: "redis://dwredis:6379"               #STORAGE_URI Keyv连接字符串，例如：redis://pass@ip:port. 可用的 Keyv 存储适配器：redis、mongo、postgres 和 mysql  ""（在内存中非持久）
      LOG_LEVEL: "log"              #LOG_LEVEL 日志级别 ( debug, verbose, log, warn, error)  默认 warn
      BODY_LIMIT: "50mb"               #BODY_LIMIT  场景或图像的有效负载大小限制  默认50mb
    depends_on: 
      - dwredis
    ports:
      - 8081:8081
    <<: *conf

  dwredis:    # excalidraw缓存
    image: redis
    container_name: dw-redis
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Redis_A.png"
    <<: *conf
    environment:
      <<: *env      
# 需要反向代理指向85端口
  room:       # excalidraw协助服务器
    image: excalidraw/excalidraw-room:sha-49bf529
    container_name: dw-room
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Excalidraw_B.png"
    ports:
      - 85:80
    <<: *conf


# **********************************************  笔记备忘录类 ***********************************************************
# ————————  备忘录  ————————
  memos:
    image: neosmemo/memos
    container_name: memos
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Memos_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:5230]"
    volumes:
      - ${DATA_PATH}/memos:/var/opt/memos
    ports:
      - 5230:5230
    environment:
      <<: *env 
    <<: *conf
# trilium 中文翻译版 推荐 有画板集成    
  trilium-cn:   
    image: leesonaa/trilium-cn
    container_name: trilium-cn
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Trilium_A.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:88]"
    ports:
      - 88:8080
    volumes:
      - ${DATA_PATH}/trilium-cn:/root/trilium-data
    environment:
      <<: *env
      #TRILIUM_DATA_DIR: "/root/trilium-data"   # 可选，自定义存储路径 注意 是容器内
    <<: *conf

# —————————— joplin ———————
  joplinpg:                                                   # joplin pg 数据库配置
    image: postgres
    container_name: joplinpg
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Postgresql_B.png"
    volumes:
      - ${DATA_PATH}/joplinpostgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    <<: *conf 
    environment:
      TZ: "Asia/Shanghai"
      POSTGRES_PASSWORD: "joplin"     # root密码
      POSTGRES_USER: "joplin"                # 创建一个其他用户
      POSTGRES_DB: "joplin"                  # 创建一个其他数据库
  
  joplin:                                                       # joplin 主程序配置
    image: joplin/server                                   # 默认账户 admin@localhost  密码 admin
    container_name: joplin
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/laurent22/joplin/dev/Assets/LinuxIcons/256x256.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:22300]"
    depends_on:
      - joplinpg
    ports:
      - "22300:22300"
    <<: *conf
    environment:
      <<: *env
      APP_PORT: "22300"
      APP_BASE_URL: "http://192.168.100.2:22300"        # 内网用也得做各一个反向代理 https访问，外网访问的话，需要反向代理后的外部访问域名 写在这里
      DB_CLIENT: "pg"
      POSTGRES_PASSWORD: "joplin"
      POSTGRES_DATABASE: "joplin"
      POSTGRES_USER: "joplin"
      POSTGRES_PORT: "5432"
      POSTGRES_HOST: "joplinpg"
# --------- immich相册 --------------------------------------------------------------------------------------------------------------------------------------------------
  immich:                              # 前端   using aio project https://github.com/imagegenius/docker-immich
    container_name: immich
    image: ghcr.dockerproxy.com/ghcr.io/imagegenius/immich:latest
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Immich_B.png"
      net.unraid.docker.webui: "http://[IP]:[PORT:2283]"
    volumes:
      - ${DATA_PATH}/immich/config:/config         # 配置路径
      - ${DATA_PATH}/immich/photo:/photos          # 相册
      #- path_to_imports:/import:ro             # 读取本地已有相册
    environment:
      <<: *env
      DB_HOSTNAME: "immich-postgres"        # pg数据库主机名或者IP
      DB_USERNAME: "immich"                 # 数据库永用户名
      DB_PASSWORD: "immich"                 # 数据库密码
      DB_DATABASE_NAME: "immich"            # 数据库 库名
      REDIS_HOSTNAME: "immich-redis"        # redis 主机名或者IP
      #DB_PORT=5432 #optional
      #REDIS_PORT=6379 #optional
      #REDIS_PASSWORD= #optional
      MACHINE_LEARNING_WORKERS: "1" #optional   打开机器学习 老旧设备如果效果不好请关闭 设置为 0
      MACHINE_LEARNING_WORKER_TIMEOUT: "120" #optional    机器学习超时  120秒
      #HTTP_PROXY: "http://v2:20172"          # 这2个是给容器传递科学环境的 环境变量 
      #HTTPS_PROXY: "http://v2:20172"
    ports:
      - 2283:8080
    devices:
      - /dev/dri:/dev/dri                     # 调用宿主显卡intel qsv 或者 vaapi 人脸识别 转码 
    depends_on:
      - immich-redis
      - immich-postgres
    <<: *conf

  immich-redis:                               # 缓存服务
    container_name: immich-redis
    image: redis
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Redis_A.png"
    expose: 
      - "6379"
    environment:
      <<: *env
    <<: *conf

  immich-postgres:                                # 数据库
    container_name: immich-postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    labels:
      net.unraid.docker.icon: "https://mirror.ghproxy.com/https://raw.githubusercontent.com/leesonaa/icons/main/icons1/Postgresql_B.png"
    environment:
      <<: *env
      POSTGRES_PASSWORD: "immich"       # 初始化数据库
      POSTGRES_USER: "immich"
      POSTGRES_DB: "immich"
    ports:
      - 5433:5432
    volumes:
      - ${DATA_PATH}/immich-pgdata:/var/lib/postgresql/data
    <<: *conf
# ------------------------------------------------------------------------------------------------------------------------------------------------------------------

# 自定义网卡 驱动为桥接  这样的好处就是 比如我有10个redis缓存服务 只对容器服务 就是让容器去调用它 我自己也没有访问它的需求 不需要做-p端口映射的操作 那么我只需要用主机名+默认端口的方式去访问就可以 因为在内部它是一个容器一个私有ip地址的 
networks:
  mynet:
    name: mnet
    driver: bridge
